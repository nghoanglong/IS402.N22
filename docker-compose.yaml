version: '3.8'

x-airflow-common:
    &airflow-common
    build: .
    environment:
        &airflow-common-env
        AIRFLOW__CORE__EXECUTOR: LocalExecutor
        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
        AIRFLOW__CORE__FERNET_KEY: ''
        AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'True'
        AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
        AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
        AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'True'
        _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
        AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
        AIRFLOW__CORE__PLUGINS_FOLDER: /opt/airflow/plugins
        AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
        AIRFLOW__WEBSERVER__RELOAD_ON_PLUGIN_CHANGE: 'True'
        AIRFLOW__CORE__LAZY_LOAD_PLUGINS: 'False'
        AIRFLOW__SMTP__SMTP_HOST: 'smtp.gmail.com'
        AIRFLOW__SMTP__SMTP_USER: 'longnguyen@behmd.com'
        AIRFLOW__SMTP__SMTP_PASSWORD: ${_AIRFLOW__SMTP__SMTP_PASSWORD}
        AIRFLOW__SMTP__SMTP_PORT: '587'
        AIRFLOW__SMTP__SMTP_MAIL_FROM: 'longnguyen@behmd.com'
        AIRFLOW__SMTP__SMTP_SSL: 'False'
        AIRFLOW__SMTP__SMTP_STARTTLS: 'True'
        AIRFLOW__WEBSERVER__BASE_URL: 'http://localhost:8089'
        AIRFLOW__WEBSERVER__WEB_SERVER_PORT: '8089'
    volumes:
        - ./dags:/opt/airflow/dags # Mount DAGs folder from git-sync
        - ./plugins:/opt/airflow/plugins
        - ./logs:/opt/airflow/logs
    user: "${AIRFLOW_UID:-50000}:0"

services:
    postgres:
        image: postgres:13
        container_name: airflow-db
        user: root
        environment:
            - POSTGRES_USER=airflow
            - POSTGRES_PASSWORD=airflow
            - POSTGRES_DB=airflow
        volumes:
            - postgres-db-volume:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "airflow"]
            interval: 5s
            retries: 5
        restart: always

    webserver:
        <<: *airflow-common
        container_name: airflow-web
        command: webserver
        user: root
        ports:
            - "8089:8089"
        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:8089/health"]
            interval: 10s
            timeout: 10s
            retries: 5
        restart: always
        depends_on:
            - postgres

    scheduler:
        <<: *airflow-common
        command: scheduler
        user: root
        container_name: airflow-scheduler
        healthcheck:
            test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
            interval: 10s
            timeout: 10s
            retries: 5
        restart: always
        depends_on:
            - postgres
    
    # airflow-gitsync:
    #     container_name: airflow-gitsync
    #     image: k8s.gcr.io/git-sync/git-sync:v3.2.2
    #     user: root
    #     environment:
    #     - GIT_SYNC_REV=HEAD
    #     - GIT_SYNC_DEPTH=1
    #     - GIT_SYNC_USERNAME=${DATA_ACCOUNT}
    #     - GIT_SYNC_MAX_FAILURES=0
    #     - GIT_KNOWN_HOSTS=false
    #     - GIT_SYNC_DEST=repo
    #     - GIT_SYNC_ROOT=/dags/root/
    #     - GIT_SYNC_REPO=${DATA_REPO}
    #     - GIT_SYNC_WAIT=60
    #     - GIT_SYNC_TIMEOUT=120
    #     - GIT_SYNC_ADD_USER=true
    #     - GIT_SYNC_PASSWORD=${DATA_ACCOUNT_PWD}
    #     - GIT_SYNC_BRANCH=main
    #     volumes:
    #         - git-sync:/dags
    #     restart: always
        
    airflow-init:
      <<: *airflow-common
      entrypoint: /bin/bash
      # yamllint disable rule:line-length
      command:
        - -c
        - |
          function ver() {
            printf "%04d%04d%04d%04d" $${1//./ }
          }
          airflow_version=$$(gosu airflow airflow version)
          airflow_version_comparable=$$(ver $${airflow_version})
          min_airflow_version=2.2.0
          min_airflow_version_comparable=$$(ver $${min_airflow_version})
          if (( airflow_version_comparable < min_airflow_version_comparable )); then
            echo
            echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
            echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
            echo
            exit 1
          fi
          if [[ -z "${AIRFLOW_UID}" ]]; then
            echo
            echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
            echo "If you are on Linux, you SHOULD follow the instructions below to set "
            echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
            echo "For other operating systems you can get rid of the warning with manually created .env file:"
            echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
            echo
          fi
          one_meg=1048576
          mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
          cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
          disk_available=$$(df / | tail -1 | awk '{print $$4}')
          warning_resources="false"
          if (( mem_available < 4000 )) ; then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
            echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
            echo
            warning_resources="true"
          fi
          if (( cpus_available < 2 )); then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
            echo "At least 2 CPUs recommended. You have $${cpus_available}"
            echo
            warning_resources="true"
          fi
          if (( disk_available < one_meg * 10 )); then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
            echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
            echo
            warning_resources="true"
          fi
          if [[ $${warning_resources} == "true" ]]; then
            echo
            echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
            echo "Please follow the instructions to increase amount of resources available:"
            echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
            echo
          fi
          mkdir -p /sources/logs /sources/dags /sources/plugins
          chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
          exec /entrypoint airflow version
      # yamllint enable rule:line-length
      environment:
        <<: *airflow-common-env
        _AIRFLOW_DB_UPGRADE: 'true'
        _AIRFLOW_WWW_USER_CREATE: 'true'
        _AIRFLOW_WWW_USER_USERNAME: 'airflow'
        _AIRFLOW_WWW_USER_PASSWORD: 'airflow'
      user: "0:0"
      volumes:
        - .:/sources

volumes:
    postgres-db-volume:
    git-sync:
    
    